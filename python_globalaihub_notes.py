# -*- coding: utf-8 -*-
"""Python-Globalaihub-Notes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/156lgmZio3GitzIEgiotHA-iEFU8_CaCO

Introduction to Python
https://globalaihub.com/courses/introduction-to-python/


Curriculum
*   Python syntax essentials
*   Flow controls
*   Functions
*   Data structures
*   Files and errors
*   Wrap up
"""

help()

fav_number = 12
if fav_number < 15:
    print("My favourite number is smaller than 15")

pi = 3.14
print(pi)

def greetings(name):
    print('Hello, {name}')

name = 'Deniz'
age = 25
print(name)
print(age)
print(type(name))
print(type(age))

import math
floor_number = (math.floor(3.45))
print(floor_number, type(floor_number))

import datetime

print(datetime.datetime.now())

import random

print(random.randint(1,6))

print("5 + 2 =", 5+2)
print("5 - 2 =", 5-2)
print("5 * 2 =", 5*2)
print("5 / 2 =", 5/2)
print("5 // 2 =", 5//2)
print("5 ** 2 =", 5**2)
print("5 % 2 =", 5%2)

''''
x = 5 # equivalent to x = 5
x += 5 # equivalent to x = x + 5
x -= 5 # equivalent to x = x - 5
x *= 5 # equivalent to x = x * 5
x /= 5 # equivalent to x = x / 5
x %= 5 # equivalent to x = x % 5
x //= 5 # equivalent to x = x // 5
x **= 5 # equivalent to x = x ** 5
''''

num1 = 10
num2 = 5

print(num1, ">", num2, "=", num1 > num2)
print(num1, ">=", num2, "=", num1 >= num2)
print(num1, "<", num2, "=", num1 < num2)
print(num1, "<=", num2, "=", num1 <= num2)
print(num1, "==", num2, "=", num1 == num2)
print(num1, "!=", num2, "=", num1 != num2)

x = 2
y = 1
x *= y + 1 
print(x)

print("True and True =", True and True)
print("True and False =", True and False)
print("False and True =", False and True)
print("False and False =", False and False)


print("True or True =", True or True)
print("True or False =", True or False)
print("False or True =", False or True)
print("False or False =", False or False)


print("not True =", not True)
print("not False =", not False)

''''
celsius = 25
if celsius > 20:
  print('Good üü©')
''''

  celsius = 18
if celsius > 20:
  print('Good üü©')
else:
  print('Cold ‚ùÑÔ∏è')


  drivers_licence = True
age = 17
 
if age > 17:
    if drivers_licence:
        print('You can drive car')
    else:
        print('You need to go to a drivers licence course')
else:
    print('You need to get older')

volcano_name = 'Eyjafjallaj√∂kull'
 
for i in volcano_name:
  print(i)
print('Loop is completed')


numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9,10]
for i in numbers:
  print(i)
 
print('Loop is completed')


for i in range(5,21):
  print(i)
print('Loop is completed')


for i in range(1,101):
  if i % 5 == 0:
    print(i)
 
print('Loop has been completed')

celcius = 10
 
while celcius < 50:
 
  if celcius > 30:
    print('Hot üî•')
  elif 30 >= celcius > 20:
    print('Good üü©')
  elif -273 < celcius <= 20:              
    print('Cold ‚ùÑÔ∏è')
  else:
    print('Something went wrong!')
  print('The current temperature is',celcius)
  celcius += 5

import random
while True:
 
    random_number = random.randrange(1000)
    print(random_number)
 
    if random_number == 777:
        print('Found!')
        break


names = ['Max', 'Felix', 'Deniz', 'Selin', 'Lucas', 26, 'Sarah']
 
for name in names:
 
    if type(name) != str:
        print('Found', name)
        break
 
    else:
        print(name, 'is a string!')

""" 
Please creat test.py file before continue to run the following
code cells.You can right click in the files segment of the colab
and create new file.
"""

# write following method in the test.py file

""" 
test.py module
This is a test module to print a message to the screen
"""
def greetings(name):
  print('Hello', name)

''''
  import test

  !pip install seaborn

  import seaborn as sns

  import seaborn as sns
 
data = [1, 2, 10, 3, 5, 6, 13]

sns.lineplot(range(7), data)
''''

def argument_printer(arg_position1, arg_position2):
   print('Argument at position 1:', arg_position1)
   print('Argument at position 2:', arg_position2)

   argument_printer('value 1', 'value 2')


   def greetings(first_name, last_name, auto_correction):
  if auto_correction == True:
    capitalized_first_name = first_name.capitalize()
    capitalized_last_name = last_name.capitalize() 
    print("Hello,", capitalized_first_name, capitalized_last_name) 
  else: 
    print("Hello,", first_name, last_name)

greetings('deNiZ', 'kaYa', True)
greetings('deNiZ', 'kaYa', False)



def car(brand, model, colour):
    print('My favourite car is the', brand, model, 'in the colour', colour)

car('Audi', 'R8', 'black')
car(colour = 'black', model = 'R8', brand = 'Audi')
car(colour = 'Audi', model = 'R8', 'black')


number = 13 #Global Variable
 
def change_number():
 number = 4 #Local Variable
 
change_number()
print(number)


number = 13
 
def change_number():
 global number 
 number = 4
 
change_number()
print(number)

def sum(number1, number2):
  print(number1 + number2)

result = sum(3, 5)
print(result)

shopping_list = ["Apple", "Juice", "Ball", "Book"]
shopping_list.append("Water")
print(shopping_list)
shopping_list.insert(2,"Banana")
print(shopping_list)
shopping_list.remove("Apple")
print(shopping_list)
shopping_list[3] = "Strawberry"
print(shopping_list)

print(shopping_list[0])
print(shopping_list[1:3])



number_list = [1,2,3,4,5]
square_list = []
for num in number_list:
  square_list.append(num**2)

print(square_list)

number_list = [1,2,3,4,5]
square_list = [num ** 2 for num in number_list]

print(square_list)

phone_book = {'Deniz Kaya':'+90 505 123 45 67', 'Selin Demir': '+49 157 12345678', 'Ali Can':'+1 234 235 5678'}
print(phone_book)
print(phone_book['Deniz Kaya'])
inventory = dict()
inventory['bananas'] = 25
inventory['apples'] = 102
inventory['oranges'] = 54
inventory['watermelons'] = 4
print(inventory)
print(inventory['apples'])
print(inventory.keys())
print(inventory.values())
print(inventory.items())

for element in inventory:
  print(element)

for key in inventory:
  inventory[key] += 100
print(inventory) 

for key, value in inventory.items():
    if value > 200:
        print('Too many', key)
    else:
        print('Enough', key)

# Commented out IPython magic to ensure Python compatibility.
# Navigate to message.txt‚Äôs directory
# %cd /content/file_operations

# opens hello.txt text file in the current directory
message_file = open("message.txt")

# specifying the full path
message_file = open("/content/file_operations/message.txt")

message_file = open("message.txt", "r")

content = message_file.read()
message_file.close()

print(content)

hello_file = open("hello.txt", "w")

hello_file.write('Hello world, this is Python')
hello_file.close()

###
###
‚Äã‚Äãimport random
while True:

  random_number = random.randrange(1000)
  print(random_number)
 
  if random_number == 777:
    print('Found!')
    break
###
###

###
###
import random
 
numbers_file = open('number_history.txt', 'w')
 
while True:
 
  random_number = random.randrange(1000)
  print(random_number)
  numbers_file.write(str(random_number))
  numbers_file.write('\n')
 
  if random_number == 777:
    print('Found!')
    numbers_file.write('Found!')
    numbers_file.close()
    break
###
###

###
###
import random
 
with open('number_history.txt', 'w') as numbers_file:
 
  while True:

    random_number = random.randrange(1000)
    print(random_number)
    numbers_file.write(str(random_number))
    numbers_file.write('\n')
 
    if random_number == 777:
      print('Found!')
      numbers_file.write('Found!')
      break
###
###

number1= 15
number2 = input('Please enter a Number: ')
print(number1 + number2)

celsius = 18
if celsius > 20:
  print('Good üü©')
  else:
    print('Cold ‚ùÑÔ∏è')

###
def divide(number1, number2):
   try:
       number1_integer = int(number1)
       number2_integer = int(number2)
       return number1_integer / number2_integer
  
   except ValueError:
       return 'Only integers are allowed!'
 
   except ZeroDivisionError:
       return 'You cannot divide any number by zero!'



number1 = input('Please provide a number1: ')
number2 = input('Please provide a number2: ')
 
print(divide(number1, number2))
###

"""Practical exercise 2: You are a game developer :)
In this practical exercise you are a game developer. You will program your first game ‚Äì Rock, Paper, Scissors.

If you are not familiar with the game, you can read about it here: https://en.wikipedia.org/wiki/Rock_paper_scissors.

You will program the game step by step. Please read the instructions carefully. There are hints and important explanations that will help you with this exercise.

### **Use a while loop to specify the number of rounds**

 
Now the game runs infinitely and the user can end it manually. But there is a more efficient way to do this: Let's ask the user again how many rounds they want to play, just as you did for the game inside the for loop.

To prevent an infinite loop, you need to add a round_counter that is 0 at the beginning. In each round, this counter needs to increase by 1.

At the end of your while loop, you need to add an "if" condition to check whether the round_counter is equal to the number of rounds that we got from user as an input. If this is the case, we need to use "break" to end the game.

Once we end the game, it would be nice to see a message that prints the winner to the screen. In case of a tie, it should print a message that the game ended in a tie.

üìå You can use "if" and "elif" statements to determine the winner at the end.

"""

#Collect all the components of your program to run it in a while loop
#Import the random library
import random

#Add the code to create a list containing the three actions of the game.
action_list = ['rock', 'paper', 'scissors']

#Add the code to set the scores of players to 0
player1_score = 0
player2_score = 0
#Add a round_counter that is 0 at the beginning
round_counter = 0

#Add the code to ask the user how many rounds they want to play
total_round = input("How many rounds do you want to play? ")

#Write a while loop and put the game inside
while True:

  #increase round_counter by 1 and print it
  round_counter +=1
  print("Round number:", round_counter)

  #Add the code to select a random action for each player
  player1_choice = random.choice(action_list)
  player2_choice = action_list[random.randint(0,2)]

  #Add the code to print the players choices
  print("Player1:", player1_choice)
  print("Player2:", player2_choice)

  #Add the tie condition
  if player1_choice == player2_choice:
    print("Tie! Both player chose same action.")

  #Add the remaining condition
  elif player1_choice == 'paper':
    if player2_choice == 'rock':
      print("Winner is: Player 1")
      player1_score +=1
    else:
      print("Winner is: Player 2")
      player2_score +=1

  elif player1_choice == 'rock':
    if player2_choice == 'paper':
      print("Winner is: Player 2")
      player2_score +=1
    else:
      print("Winner is: Player 1")
      player1_score +=1

  elif player1_choice == 'scissors':
    if player2_choice == 'paper':
      print("Winner is: Player 1")
      player1_score +=1
    else:
      print("Winner is: Player 2")
      player2_score +=1

  #print the score
  print("Score:", "Player1 =",player1_score, "Player2 =",player2_score)

  #stop the while loop if the round_counter equals the number of total rounds
  if round_counter == int(total_round):
    break
#Print the outcome of the game by using conditional statements
if player1_score == player2_score:
  print("There is no winner, tie.")
elif player1_score > player2_score:
  print("Player 1 won with score", player1_score, ":", player2_score)
elif player1_score < player2_score:
  print("Player 2 won with score", player1_score, ":", player2_score)

"""Practical exercise 4: Your own supermarket
In this practical exercise, you are the owner of a supermarket.

üõí You will program an online shop to sell different types of items.

Please read the instructions carefully. There are hints and important explanations that will help you with this exercise.


Set up the online shop
So, now that you have a gained some experience, let's start with our main exercise!

Of course, you first need to add all the items that will be available in your online shop.

üìåCreate a dictionary for your inventory. For each item the key should be the name and the value should be a list containing price, stock, and section.

üìåüìå Your dictionary should follow this structure:


Your first client is here
Now that your inverntory is set up, your first client visits the shop. Let's take a peak in their shopping list.

üìå As we did in the warm up, let's create a shopping list for your first client with tuples for each item. This time, each tuple should consist of the item and the amount that they want to purchase.

The list should follow this structure:


What happens next?
Everytime a customer wants to purchase something from your online shop, a few steps have to be taken. Here are the functions that will make your online shop work.

(1) Check the stock
First, you have to make sure that you have sufficient stock of each item in your inventory.

check_stock
Define a function to check the stock quantity of the items in your shopping list. The function should take your shopping list and inventory as an argument. If there is not enough stock, the amount in your shopping list should be updated to the highest amount possible.

üí£ To start, create an empty shopping list, in which the items and their updated amounts will be written in as tuples. Remember that we cannot update them because tuples are immutable.

üìå You can use a for loop to iterate over each item inside the shopping list.

üìå You can then unpack the tuples to access each item and amount separately.

üìå To access the available stock in your inventory dictionary, use the item as a key, then the corresponding index in the values list and check if there is enough stock.

üìå The print function can help you to inform the client which items are out of stock and what the available amount is.

üìå Update the amount if necessary and append the item and amount to your updated shopping list.
"""

#Please create a shopping list
shopping_list = ['milk', 'apples', 'oranges', 'potatoes', 'bread']

#Use the append method to add bananas to your list
shopping_list.append('bananas')
#Print your shopping list
print(shopping_list)

#Use insert method to add onions at a specific position in your list
shopping_list.insert(2,'onions')

#Print your shopping list
print(shopping_list)

#Use the remove method to remove potatoes from the list
shopping_list.remove('potatoes')
#Print your shopping list
print(shopping_list)

#Expand your list by adding tuples for each item
shopping_list = [('milk', 'dairy'), ('apples', 'fruits'), ('onions', 'vegetables'), ('oranges', 'fruits'), ('bread','bakery'), ('bananas', 'fruits')]

#Use for loop to iterate over list and get each tuple for unpacking
for element in shopping_list:
  #unpack the tuple into item and section variables 
  item, section = element
  #print the message
  print("You can find the",item,"in the",section,"section.")

  #Create a dictionary which contains the item as key and the section as value
shopping_list = {'milk':'dairy', 'apples':'fruits', 'onions':'vegetables', 'oranges':'fruits', 'bread':'bakery', 'bananas':'fruits'}

#Print the keys
print(shopping_list.keys())

#Print the values
print(shopping_list.values())

#Print the key/value pairs
print(shopping_list.items())



#Create a dictionary for your inventory

inventory = {'Milk':[4,1000,'dairy'],
             
             'Apples':[2,3,'fruits'],

             'Onions':[1,50,'vegetables'],

             'Oranges':[1.5,1000,'fruits'],

             'Bread':[3,100,'bakery'],

             'Bananas':[5,300,'fruits']}  



#Create a shopping list that specifies how much of each item you want to purchase
shopping_list = [('milk',1), ('apples',4), ('onions', 5), ('oranges',5), ('bread',2), ('bananas',10)]


#Define the check_stock function
def check_stock(shopping_list, inventory):
  #Create the empty shopping_list_updated
  updated_shopping_list = []
  #Write a for loop to iterate over each item in your shopping list
  for element in shopping_list:
    item, amount = element
    #Access the available stock in your inventory
    inventory_value = inventory[item]
    if amount > inventory_value[1]:
      amount = inventory_value[1]
      print("We dont have enough stock of", item,"you can buy a maximum amount of",inventory_value[1])
    #append item and amount to your updated shopping list
    updated_shopping_list.append((item,amount))
  return updated_shopping_list






#Define the compute_bill function
def compute_bill(updated_shopping_list, inventory):
  #Create a bill variable that equals 0
  bill = 0
  #Write a for loop to iterate over each item in your updated shopping list
  for element in updated_shopping_list:
    item, amount = element
    #access the price in your inventory
    inventory_value= inventory[item]
    #Compute the price and add it to the bill
    bill += inventory_value[0] * amount
  return bill







#Define the update_stock function 
def update_stock(updated_shopping_list, inventory):
  #Write a for loop to iterate over each item in your updated shopping list
  for element in updated_shopping_list:
    item, amount = element
    #access the stock in your inventory
    inventory_value = inventory[item]
    #Decrease the stock by the amount that was purchased
    inventory_value[1] = inventory_value[1] - amount
  
  return inventory


#Call check_stock function for your shopping list
updated_shopping_list = check_stock(shopping_list, inventory)
print("Your updated shopping list:", updated_shopping_list)


#Call the compute_bill function for your updated shopping list
bill = compute_bill(updated_shopping_list, inventory)
print("Total price:",bill,"$")


#Call the update_stock function for your updated shopping list
new_inventory = update_stock(updated_shopping_list, inventory)
print("The inventory was updated:", new_inventory)